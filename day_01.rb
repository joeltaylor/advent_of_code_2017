require 'minitest/autorun'
require 'benchmark'
################################################################################
# Part 1
#
# Task
# Find the _sum_ of all digits that match the _next_ digit in the list. The
# list is circular, so the digit after the last digit is the first digit in the
# list.
#
# Constraints:
# Find the solution in 1ms or less.
#
# Examples:
# - `1122` produces 3
# - `1111` produces 4
# - `1234` produces 0
# - `91212129` produces 9
#
#
# Input: Assuming integers and not a string
# Output: Integer
#
# Current solution:
# Time complexity: O(n)
# Space complexity: O(n)
#
# Part 2
#
# Task
# Find the _sum_ of all digits that match the _next_ digit that is halfway around
# the list. The list is circular, so the digit after the last digit is the
# first digit in the list.
#
# Constraints:
# Find the solution in 1ms or less.
#
# Examples:
# - `1212` produces 6
# - `1221` produces 0
# - `123425` produces 4
# - `123123` produces 12
# - `12131415` produces 4
#
#
# Input: Integers with an even number of digits
# Output: Integer
#
# Current solution:
# Time complexity: O(n)
# Space complexity: O(n)
#
################################################################################

class CaptchaSolver
  # Part 1
  def self.solve(captcha)
    total = 0

    int_list = captcha.to_s.chars.map(&:to_i)

    int_list << int_list[0] unless int_list.length == 1

    int_list.each_with_index do |item, index|
      total += item if int_list[index + 1] == item
    end

    total
  end

  # Part 2
  def self.solve_part_two(captcha)
    total = 0

    int_list = captcha.to_s.chars.map(&:to_i)
    steps_forward = int_list.size / 2

    int_list += int_list[0...steps_forward]

    int_list.each_with_index do |item, index|
      total += item if int_list[index + steps_forward] == item
    end

    total
  end
end

class CaptachaSolverTest < Minitest::Test
  def test_example_cases
    assert_equal(3, CaptchaSolver.solve(1122))
    assert_equal(4, CaptchaSolver.solve(1111))
    assert_equal(0, CaptchaSolver.solve(1234))
    assert_equal(9, CaptchaSolver.solve(91212129))

    assert_equal(6,  CaptchaSolver.solve_part_two(1212))
    assert_equal(0,  CaptchaSolver.solve_part_two(1221))
    assert_equal(4,  CaptchaSolver.solve_part_two(123425))
    assert_equal(12, CaptchaSolver.solve_part_two(123123))
    assert_equal(4,  CaptchaSolver.solve_part_two(12131415))
  end

  def test_other_cases
    assert_equal(18, CaptchaSolver.solve(91299))
    assert_equal(0,  CaptchaSolver.solve(01))

    assert_equal(18, CaptchaSolver.solve_part_two(991299))
    assert_equal(2,  CaptchaSolver.solve_part_two(11))
  end

  def test_timing_of_provided_captcha
    captcha
    time = time_in_milliseconds { CaptchaSolver.solve(captcha) }
    assert(time < 1.0, "Greater than 1 ms: #{time}")

    time = time_in_milliseconds { CaptchaSolver.solve_part_two(captcha) }
    assert(time < 1.0, "Greater than 1 ms: #{time}")
  end

  def time_in_milliseconds(&block)
    time = Benchmark.realtime do
      yield block
    end
    time * 1000
  end

  # def test_timing_of_provided_captcha_doubled_for_giggles
  #   captcha
  #   time = Benchmark.realtime do
  #     CaptchaSolver.solve(captcha)
  #   end
  #   milliseconds = time * 1000
  #   assert(milliseconds < 1.0, "Took greater than 1 ms: #{milliseconds}")
  # end
end
